#!/usr/bin/env node
var config = require('./modules/librato-cli-config');
var client = require('./modules/librato-cli-client');
var flow = require('./modules/librato-cli-flow');
var program = require('commander');
var fs = require('fs');

program
  .usage('[options] [alerts_definition]')
  .option('-f, --file [alert_file]', 'Import all alert definitions contained in the given file')
  .parse(process.argv);
var args = program.args;

if (!program.file && args.length < 1) {
  program.outputHelp();
  flow.error('You must specify an alerts definition to import, either as a string argument or by loading from a file using --file/-f');
  return;
}

const requestLog = (context, data, response) => {
  console.log(context + ' ' + response.statusCode + ': ' + response.statusMessage);
  //console.log(JSON.stringify(data, null, 2));
}

const findId = (payload) => {
  const endPoint = `${config.baseUrl}v1/alerts?name=${payload.data.name}`;
  return new Promise( (resolve, reject) =>
    client.get(endPoint, payload, (data, response) => {
      requestLog(`fetching alert id for ${payload.data.name}`, data, response);
      resolve(data.alerts[0].id);
    })
  );
};

var importAlert = function(alertDefinitions) {
  alertDefinitions.forEach(function(alert) {
    var payload = {
      data: alert,
      headers: { 'Content-Type': 'application/json' }
    };

    var endPoint = config.baseUrl + 'v1/alerts';
    var updateEndPoint = endPoint + '?name='
    var request = new Promise((resolve,reject) => {
      client.post(endPoint, payload, function (data, response) {
        requestLog(`creating alert ${payload.data.name}`, data, response);
        resolve({"statusCode": response.statusCode, "statusMessage": response.statusMessage})
      })
    });
    request.then( (result) => {
      if (result.statusCode != 201) {
        findId(payload).then( (id) =>
        client.put(endPoint + '/' + id, payload, function(data, response) {
          requestLog(`updating alert ${payload.data.name}`, data, response);
        }));
      }

    });

  });
};

if (program.file) {
  fs.readFile(program.file, 'utf8', function (err, data) {
    if (err) {
      return flow.error(err);
    }

    importAlert(JSON.parse(data));
  });
} else {
  importAlert(JSON.parse(args[args.length - 1]));
}